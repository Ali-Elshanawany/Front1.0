يه البيانات ال order مش بتظهر في pop up <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Profile</title>
  <link rel="icon" href="../assets/pic.png" type="image/png">
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i" rel="stylesheet">
  <link rel="stylesheet" href="../style/user/vendor/bootstrap/css/bootstrap.min.css">
  <link href="../style/styles.css" rel="stylesheet">
  <link rel="stylesheet" href="../style/user/styles.css">
  <link rel="stylesheet" href="../style/user-profile.css">
</head>
<body>
  <section class="section profile" id="sectionprofile">
    <div class="row">
      <div class="col-xl-4">
        <div class="card">
          <div class="card-body profile-card pt-4 d-flex flex-column align-items-center">
            <img src="" alt="Profile" class="rounded-circle" id="profileImage">
            <h2 id="userNameDisplay"></h2>
          </div>
        </div>
      </div>
      <div class="col-xl-8">
        <div class="card">
          <div class="card-body pt-3">
            <ul class="nav nav-tabs nav-tabs-bordered">
              <li class="nav-item">
                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#profile-overview">Overview</button>
              </li>
              <li class="nav-item">
                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#profile-edit">Edit Profile</button>
              </li>
              <li class="nav-item">
                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#profile-change-password">Change Password</button>
              </li>
            </ul>
            <div class="tab-content pt-2">
              <div class="tab-pane fade show active profile-overview" id="profile-overview">
                <h5 class="card-title">Profile Details</h5>
                <div class="row mb-3">
                  <div class="col-lg-3 col-md-4 label">Full Name: </div>
                  <div class="col-lg-9 col-md-8 form-control" id="fullName"></div>
                </div>
                <div class="row mb-3">
                  <div class="col-lg-3 col-md-4 label">City: </div>
                  <div class="col-lg-9 col-md-8 form-control" id="city"></div>
                </div>
                <div class="row mb-3">
                  <div class="col-lg-3 col-md-4 label">Street: </div>
                  <div class="col-lg-9 col-md-8 form-control" id="street"></div>
                </div>
                <div class="row mb-3">
                  <div class="col-lg-3 col-md-4 label">Phone: </div>
                  <div class="col-lg-9 col-md-8 form-control" id="phone"></div>
                </div>
                <div class="row">
                  <div class="col-lg-3 col-md-4 label">Email:</div>
                  <div class="col-lg-9 col-md-8 form-control" id="mail"></div>
                </div>
              </div>
              <div class="tab-pane fade profile-edit pt-3" id="profile-edit">
                <form id="editProfileForm">
                  <div class="row mb-3">
                    <label for="fullName" class="col-md-4 col-lg-3 col-form-label">Full Name</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="fullName" type="text" class="form-control" id="editFullName">
                    </div>
                  </div>
                  <div class="row mb-3">
                    <label for="city" class="col-md-4 col-lg-3 col-form-label">City</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="city" type="text" class="form-control" id="editCity">
                    </div>
                  </div>
                  <div class="row mb-3">
                    <label for="street" class="col-md-4 col-lg-3 col-form-label">Street</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="street" type="text" class="form-control" id="editStreet">
                    </div>
                  </div>
                  <div class="row mb-3">
                    <label for="phone" class="col-md-4 col-lg-3 col-form-label">Phone</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="phone" type="text" class="form-control" id="editPhone">
                    </div>
                  </div>
                  <div class="row mb-3">
                    <label for="email" class="col-md-4 col-lg-3 col-form-label">Email</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="email" type="email" class="form-control" id="editEmail">
                    </div>
                  </div>
                  <div class="row mb-3">
                    <label for="profileImage" class="col-md-4 col-lg-3 col-form-label">Profile Image</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="profileImage" id="profileImg" type="file" class="form-control" id="editProfileImage" accept="image/*">
                    </div>
                  </div>
                  <div class="text-center">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                  </div>
                </form>
              </div>
              <div class="tab-pane fade pt-3" id="profile-change-password">
                <form id="changePasswordForm">
                  <div class="row mb-3">
                    <label for="currentPassword" class="col-md-4 col-lg-3 col-form-label">Current Password</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="password" type="password" class="form-control" id="currentPassword">
                    </div>
                  </div>
                  <div class="row mb-3">
                    <label for="newPassword" class="col-md-4 col-lg-3 col-form-label">New Password</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="newPassword" type="password" class="form-control" id="newPassword">
                    </div>
                  </div>
                  <div class="row mb-3">
                    <label for="renewPassword" class="col-md-4 col-lg-3 col-form-label">Re-enter New Password</label>
                    <div class="col-md-8 col-lg-9">
                      <input name="renewPassword" type="password" class="form-control" id="renewPassword">
                    </div>
                  </div>
                  <div class="text-center">
                    <button type="submit" class="btn btn-primary">Change Password</button>
                  </div>
                </form>
              </div>
            </div>
            <div class="container mt-4 text-center"> 
              <button class="logout-btn" id="logoutButton">Logout</button>
            </div>
<div id="order-details">
    <h2>Order Details</h2>
    <div id="order-info"></div>
    <div id="product-details"></div>
</div>

          </div>
        </div>
      </div>
    </div>
    <div class="card mt-3">
      <div class="card-body">
        <h5 class="card-title">Your Orders</h5>
        <table class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Order ID</th>
              <th scope="col">Order Status</th>
              <th scope="col">Total Price</th>
              <th scope="col">Review Details</th>
            </tr>
          </thead>
          <tbody id="ordersTableBody">
            <tr>
             <!-- // <td><img src="../assets/default-product.png" alt="Product" style="width: 50px; height: 50px;"></td> -->
              <td>Example Product</td>
              <td>1</td>
              <td>Delivered</td>
              <td><button class="btn btn-info review-details-btn" data-product-id="1" data-product-name="Example Product" data-status="Delivered" data-product-image="../assets/default-product.png" data-orders='[{"_id":"1","CreatedAt":"2023-10-01T00:00:00Z"}]'>Review Details</button></td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div id="order-info"></div>
            <div id="product-details"></div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
 

  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
  <script src="../style/user/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="../js/users-profile.js" type="module">
    import { getCurrentUser, getUsers, saveDataInLocalStorage, loadDataFromLocalStorage, data, isAuthorized } from './Data.js';

document.addEventListener("DOMContentLoaded", function () {
  loadDataFromLocalStorage();
  loadOverview(); 
  loadOrders(); 

  document.querySelectorAll('.review-details-btn').forEach(button => {
    button.addEventListener('click', function () {
      const orderId = this.getAttribute('data-order-id');
      showOrderDetails(orderId);
    });
  });
});

function encryptPassword(password) {
  return CryptoJS.SHA256(password).toString(CryptoJS.enc.Base64); 
}
 
const editProfileForm = document.getElementById("editProfileForm");
if (editProfileForm) {
  editProfileForm.addEventListener("submit", updateCurrentUserProfile);
}

const changePasswordForm = document.getElementById("changePasswordForm");
if (changePasswordForm) {
  changePasswordForm.addEventListener("submit", updatePassword);
}

loadDataFromLocalStorage();

const table = document.querySelector(".table");
const headers = table.querySelectorAll("th");
let currentSortColumn = null;
let sortDirection = true; // true for ascending, false for descending

// Sorting headers
headers.forEach((header, index) => {
  header.addEventListener("click", () => {
    sortDirection = currentSortColumn === index ? !sortDirection : true;
    currentSortColumn = index;
    sortTable(index, sortDirection);
  });
});

// Sort Table Function
function sortTable(columnIndex, ascending) {
  const rows = Array.from(table.querySelectorAll("tbody tr"));

  rows.sort((rowA, rowB) => {
    const cellA = rowA.children[columnIndex]?.innerText.trim() || "";
    const cellB = rowB.children[columnIndex]?.innerText.trim() || "";

    const a = isNaN(cellA) ? cellA : parseFloat(cellA);
    const b = isNaN(cellB) ? cellB : parseFloat(cellB);

    if (a < b) return ascending ? -1 : 1;
    if (a > b) return ascending ? 1 : -1;
    return 0;
  });

  // Append sorted rows 
  const tbody = table.querySelector("tbody");
  tbody.innerHTML = "";
  rows.forEach(row => tbody.appendChild(row));
}

// Load user data
loadOverview();
loadOrders();

// Add event listeners to review buttons
document.querySelectorAll('.review-details-btn').forEach(button => {
  button.addEventListener('click', function () {
    const orderId = this.getAttribute('data-order-id');
    showOrderDetails(orderId);
  });
});

// Logout Functionality
const logoutButton = document.getElementById("logoutButton");
if (logoutButton) {
  logoutButton.addEventListener("click", confirmLogout);
}

function loadOverview() {
  const currentUser = getCurrentUser();
  
  if (!currentUser) {
    console.error("No current user found.");
    return;
  }

  document.getElementById("fullName").innerText = currentUser.Name || "Unknown";
  document.getElementById("mail").innerText = currentUser.Email || "Unknown";
  document.getElementById("phone").innerText = currentUser.Phone || "Unknown";
  document.getElementById("street").innerText = currentUser.Street || "Unknown";
  document.getElementById("city").innerText = currentUser.City || "Unknown";

  const profileImage = currentUser.ProfileImage || "../assets/profile.png";
  document.getElementById("profileImage").src = profileImage;
}

function updateCurrentUserProfile(event) {
  event.preventDefault();

  const currentUser = getCurrentUser();
  if (!currentUser) {
    Swal.fire("Error!", "Current user not found.", "error");
    return;
  }

  const username = document.getElementById("editFullName").value.trim();
  const email = document.getElementById("editEmail").value.trim();
  const phone = document.getElementById("editPhone").value.trim();
  const city = document.getElementById("editCity").value.trim();
  const street = document.getElementById("editStreet").value.trim();

  const profileImgElement = document.getElementById("profileImg");
  let profileImagePath = currentUser.ProfileImage || "../assets/profile.png";

  if (profileImgElement.files.length > 0) {
    const file = profileImgElement.files[0];
    const reader = new FileReader();
    reader.onload = function (e) {
      profileImagePath = e.target.result;
      document.getElementById("profileImage").src = profileImagePath;
    };
    reader.readAsDataURL(file);
  }

  if (!validateProfileFields(username, email, phone, city, street)) {
    return;
  }

  const updatedData = {
    Name: username || currentUser.Name,
    Email: email || currentUser.Email,
    Phone: phone || currentUser.Phone,
    City: city || currentUser.City,
    Street: street || currentUser.Street,
    ProfileImage: profileImagePath,
    _id: currentUser._id,
  };

  const users = getUsers();
  const userIndex = users.findIndex(user => user._id === currentUser._id);
  if (userIndex !== -1) {
    users[userIndex] = { ...users[userIndex], ...updatedData };
    data.CurrentUser = users[userIndex];
    saveDataInLocalStorage("users", users);
    saveDataInLocalStorage("currentUser", data.CurrentUser);

    loadOverview();
    Swal.fire("Success!", "Profile updated successfully.", "success");
  } else {
    Swal.fire("Error!", "User not found in the users list.", "error");
  }
}

function validateProfileFields(username, email, phone, city, street) {
  if (username === "" || username.length < 3) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Username',
      text: 'Username must contain at least 3 characters.',
    });
    return false;
  }

  const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  if (!emailPattern.test(email)) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Email',
      text: 'Please enter a valid email address.',
    });
    return false;
  }

  const phonePattern = /^(011|012|010|015)\d{8}$/;
  if (!phonePattern.test(phone)) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Phone Number',
      text: 'Phone number must start with 011, 012, 010, or 015 and contain 11 digits.',
    });
    return false;
  }

  if (city === "") {
    Swal.fire({
      icon: 'error',
      title: 'City Not Selected',
      text: 'Please select a city.',
    });
    return false;
  }

  const streetPattern = /[a-zA-Z]/;
  if (!streetPattern.test(street)) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Street',
      text: 'Street must contain at least one letter.',
    });
    return false;
  }

  return true;
}

function updatePassword(event) {
  event.preventDefault();

  const currentUser = getCurrentUser();
  if (!currentUser) {
    Swal.fire("Error!", "Current user not found.", "error");
    return;
  }

  const currentPassword = document.getElementById("currentPassword").value.trim();
  const newPassword = document.getElementById("newPassword").value.trim();
  const renewPassword = document.getElementById("renewPassword").value.trim();

  const encryptedCurrentPassword = encryptPassword(currentPassword);
  if (encryptedCurrentPassword !== currentUser.Password) {
    Swal.fire({
      icon: 'error',
      title: 'Incorrect Password',
      text: 'The current password you entered is incorrect.',
    });
    return;
  }

  const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])[A-Za-z\d!@#$%^&*]{6,}$/;
  if (!passwordPattern.test(newPassword)) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Password',
      text: 'Password must contain at least 6 characters, including an uppercase letter, a lowercase letter, and a special character.',
    });
    return;
  }

  if (newPassword !== renewPassword) {
    Swal.fire({
      icon: 'error',
      title: 'Password Mismatch',
      text: 'The new password and confirmation password do not match.',
    });
    return;
  }

  const encryptedPassword = encryptPassword(newPassword);

  const users = getUsers();
  const userIndex = users.findIndex(user => user._id === currentUser._id);
  if (userIndex !== -1) {
    users[userIndex].Password = encryptedPassword;
    data.CurrentUser.Password = encryptedPassword;

    saveDataInLocalStorage("users", users);
    saveDataInLocalStorage("currentUser", data.CurrentUser);

    loadOverview();
    Swal.fire("Success!", "Password updated successfully.", "success");
  } else {
    Swal.fire("Error!", "User not found in the users list.", "error");
  }
}

function loadOrders() {
  const currentUser = getCurrentUser();
  if (!currentUser) {
    console.error("No current user found.");
    return;
  }

  const ordersTableBody = document.getElementById("ordersTableBody");
  if (!ordersTableBody) {
    console.error("Orders table body not found.");
    return;
  }

  ordersTableBody.innerHTML = "";

  if (!data.Orders || !Array.isArray(data.Orders)) {
    console.error("Orders data is missing or invalid.");
    ordersTableBody.innerHTML = <tr><td colspan="5" class="text-center">No orders found.</td></tr>;
    return;
  }

  const userOrders = data.Orders.filter(order => order.UserID === currentUser._id);

  if (userOrders.length === 0) {
    ordersTableBody.innerHTML = <tr><td colspan="5" class="text-center">No orders found.</td></tr>;
  } else {
    userOrders.forEach(order => {
      const row = 
        <tr>
          <td>${order._id}</td>
          <td>${order.Status}</td>
          <td>${order.TotalPrice}</td>
          <td><button class="btn btn-info review-details-btn" data-order-id="${order._id}" data-bs-toggle="modal" data-bs-target="#orderDetailsModal">Review Details</button></td>
        </tr>;
      ordersTableBody.innerHTML += row;
    });
  }
}

function showOrderDetails(orderId) {
  const order = data.Orders.find(order => order._id === orderId);
  if (!order) {
    console.error("Order not found.");
    return;
  }

  const orderInfo = document.getElementById('order-info');
  orderInfo.innerHTML = 
    <p>Order ID: ${order._id}</p>
    <p>Date: ${order.CreatedAt}</p>
    <p>Total Price: ${order.TotalPrice}</p>
    <p>Status: ${order.Status}</p>
  ;

  const productDetails = document.getElementById('product-details');
  productDetails.innerHTML = '<h3>Products</h3>';
  order.Items.forEach((item, index) => {
    const product = data.Products.find(p => p._id === item._id);
    const productName = product ? product.Name : "Unknown Product";
    productDetails.innerHTML += 
      <p>Product ${index + 1}</p>
      <p>Product ID: ${item._id}</p>
      <p>Product Name: ${productName}</p>
      <p>Quantity: ${item.Quantity}</p>
      <p>Price: ${item.Price}</p>
      <p>Date: ${order.CreatedAt}</p>
      <p>Status: ${order.Status}</p>
      <hr>
    ;
  });
}

// Confirm logout
function confirmLogout() {
  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, logout!'
  }).then((result) => {
    if (result.isConfirmed) {
      localStorage.removeItem('currentUser');
      location.assign("../html/homeMain.html");
    }
  });
}
  </script>
</body>
</html>